#!/usr/bin/env node
"use strict";

//module dependencies.
var app = require("dotenv").config();
var app = require("../dist/app/app");
var debug = require("debug")("express:server");
var http = require("http");
var tmi = require("tmi.js");

var tmiOptions = {
  options: {
    debug: true
  },
  connection: {
    cluster: "aws",
    reconnect: true
  },
  identity: {
    username: process.env.TWITCH_USER, // Twitchname of your bot (create a profile)
    password: process.env.TWITCH_PASS // Get your Token here: http://twitchapps.com/tmi/
  },
  channels: [ "#" + process.env.TWITCH_CHANNEL ]
}

var botClient = new tmi.client(tmiOptions);
botClient.connect();

botClient.on("chat", function(channel, user, message, self){
  if( message === "!twitter" ){
    botClient.action(channel, "twitter.com/mytwitter");
  }
  if( message === "hi" || message === "hello" ){
    botClient.action(channel, "Hello there, "+user['display-name']+"!");
  }
})

botClient.on('connected', function(address, port){ 
  console.log("bot is connected to: "+tmiOptions.channels[0]);
  botClient.action(tmiOptions.channels[0], "Hello, i'm a bot!");
});

//get port from environment and store in Express.
var port = normalizePort(process.env.PORT || 8080);
app.set("port", port);


//create http server
var server = http.createServer(app);

//listen on provided ports
server.listen(port);

//add error handler
server.on("error", onError);

//start listening on port
server.on("listening", onListening);


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}
